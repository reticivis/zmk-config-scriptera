#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

//&nice_view_spi { cs-gpios = <&gpio0 7 GPIO_ACTIVE_HIGH>; };

// index of keymap layers
#define DEF 0 // default layer
#define MSK 1 // mouse key layer
#define MSC 2 // mouse scoll layer
#define SET 3 // settings layer

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <210>;
    quick_tap_ms = <0>;
    retro-tap;
};

// -----------------

/ {
    /* input config for mouse move mode on default layer (DEF & MSK) */
    tb0_mmv_ibl {
            compatible = "zmk,input-behavior-listener";
            device = <&vtball0>;
            layers = <DEF MSK>;
            evt-type = <INPUT_EV_REL>;
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            scale-multiplier = <1>;
            scale-divisor = <1>;
    };
    tb1_mmv_ibl {
            compatible = "zmk,input-behavior-listener";
            device = <&vtball1>;
            layers = <DEF MSK>;
            evt-type = <INPUT_EV_REL>;
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            scale-multiplier = <1>;
            scale-divisor = <1>;
    };

    // trackball_snipe_listener {
    //     compatible = "zmk,input-behavior-listener";
    //     device = <&vtrackball>;
    //     layers = <3>;
    //     evt-type = <INPUT_EV_REL>;
    //     x-input-code = <INPUT_REL_X>;
    //     y-input-code = <INPUT_REL_Y>;
    //     scale-multiplier = <1>;
    //     scale-divisor = <16>;
    // };

    /* input config for mouse scroll mode on momentary mouse scoll layer (MSC) */
    tb0_msl_ibl {
            compatible = "zmk,input-behavior-listener";
            device = <&vtball0>;
            layers = <MSC>;
            evt-type = <INPUT_EV_REL>;
            x-input-code = <INPUT_REL_MISC>;
            y-input-code = <INPUT_REL_WHEEL>;
            bindings = <&ib_wheel_scaler 1 8>;
    };
    tb1_msl_ibl {
            compatible = "zmk,input-behavior-listener";
            device = <&vtball1>;
            layers = <MSC>;
            evt-type = <INPUT_EV_REL>;
            x-input-code = <INPUT_REL_MISC>;
            y-input-code = <INPUT_REL_WHEEL>;
            bindings = <&ib_wheel_scaler 1 8>;
    };

    /* adjust cooldown waiting period for mouse key layer (MSK) after activated */
    ib_tog_layer: ib_tog_layer {
            compatible = "zmk,input-behavior-tog-layer";
            #binding-cells = <1>;
            time-to-live-ms = <1000>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
            compatible = "zmk,input-behavior-scaler";
            #binding-cells = <2>;
            evt-type = <INPUT_EV_REL>;
            input-code = <INPUT_REL_WHEEL>;
    };

// -----------------

    behaviors {
        tsl: behavior_trackball_scroll {
            compatible = "zmk,behavior-point-device-incremental";
            #trackball-binding-cells = <0>;
            mode = "scroll-mode";
            flavor = "default";
            scale_mode = "dividor";
            scale_factor = <4>;
            smoothing;
        };

        tkp_fast: behavior_trackball_key_press {
            compatible = "zmk,behavior-point-device-directional";
            #trackball-binding-cells = <4>;
            mode = "distance-mode";
            flavor = "2-dim";
            step_size = <50>;
        };
    };

// -----------------

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        DEF_layer {
            bindings = <
&kp Q           &kp W           &kp E             &kp R               &kp T    &kp Y  &kp U                &kp I              &kp O            &kp P
&mt LEFT_WIN A  &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LEFT_CONTROL F  &kp G    &kp H  &mt RIGHT_CONTROL J  &mt RIGHT_SHIFT K  &mt RIGHT_ALT L  &mt RIGHT_GUI SEMICOLON
&kp Z           &kp X           &kp C             &kp V               &kp B    &kp N  &kp M                &kp COMMA          &kp DOT          &kp SLASH
&mo MSC         &mo MSK                                                                                                     &lt 3 ENTER      &lt 1 SPACE
            >;
        };

        // Numbers and arrow key navigation

        MSK_layer {
            bindings = <
&kp N1             &kp N2        &kp N3    &kp N4       &kp N5          &kp N6      &kp N7          &kp N8            &kp N9      &kp N0
&mkp LCLK          &kp KP_MINUS  &kp UP    &kp KP_PLUS  &kp KP_EQUAL    &kp ENTER   &mkp LCLK       &mo MSC           &kp TAB     &kp BACKSPACE
&mkp RCLK          &kp LEFT      &kp DOWN  &kp RIGHT    &kp ASTRK       &kp ESCAPE  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &none
&trans             &trans                                                                                             &trans      &trans
            >;
        };

        // Symbols organized by use

        MSC_layer {
            bindings = <
&kp EXCLAMATION  &kp AT        &kp HASH        &kp DOLLAR         &kp PERCENT            &kp EXCL        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp CARET      &kp TILDE
&mkp LCLK        &kp GRAVE     &kp APOSTROPHE  &kp DOUBLE_QUOTES  &mt LG(PLUS) PLUS      &kp MINUS       &mkp LCLK             &kp RIGHT_PARENTHESIS  &kp AMPERSAND  &kp PIPE
&mkp RCLK        &kp LEFT_GUI  &kp ASTERISK    &kp KP_EQUAL       &mt LG(MINUS) MINUS    &kp UNDERSCORE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH  &none
&trans           &mo 3                                                                                                                                &trans         &trans
            >;
        };

        // Used to change the keyboard's settings

        SET_layer {
            bindings = <
&bootloader  &none  &none  &bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 3  &none  &none  &none  &bootloader
&none        &none  &none  &none       &bt BT_SEL 1    &bt BT_SEL 4  &none  &none  &none  &none
&none        &none  &none  &none       &bt BT_SEL 2    &bt BT_SEL 5  &none  &none  &none  &none
&none        &none                                                                 &none  &none
            >;
        };
    };
};